@using HomeMaintenance.Core.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="modal fade" id="taskEditModal" tabindex="-1" aria-labelledby="taskEditModalLabel">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskEditModalLabel">Edit Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (Task != null)
                {
                    <EditForm Model="Task" OnValidSubmit="SaveTask">
                        <DataAnnotationsValidator />
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="title" class="form-label">Title *</label>
                                    <InputText id="title" class="form-control" @bind-Value="Task.Title" />
                                    <ValidationMessage For="@(() => Task.Title)" />
                                </div>
                                
                                <div class="mb-3">
                                    <label for="description" class="form-label">Description</label>
                                    <InputTextArea id="description" class="form-control" rows="3" @bind-Value="Task.Description" />
                                    <ValidationMessage For="@(() => Task.Description)" />
                                </div>
                                
                                <div class="mb-3">
                                    <label for="priority" class="form-label">Priority *</label>
                                    <InputSelect id="priority" class="form-select" @bind-Value="Task.Priority">
                                        <option value="">Select priority</option>
                                        <option value="Low">Low</option>
                                        <option value="Medium">Medium</option>
                                        <option value="High">High</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => Task.Priority)" />
                                </div>
                                
                                <div class="mb-3">
                                    <label for="frequency" class="form-label">Frequency *</label>
                                    <InputSelect id="frequency" class="form-select" @bind-Value="Task.Frequency">
                                        <option value="">Select frequency</option>
                                        <option value="Daily">Daily</option>
                                        <option value="Weekly">Weekly</option>
                                        <option value="Monthly">Monthly</option>
                                        <option value="Yearly">Yearly</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => Task.Frequency)" />
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="frequencyInterval" class="form-label">Frequency Interval</label>
                                    <InputNumber id="frequencyInterval" class="form-control" @bind-Value="Task.FrequencyInterval" />
                                    <small class="form-text text-muted">How many units of the frequency (e.g., every 2 weeks)</small>
                                    <ValidationMessage For="@(() => Task.FrequencyInterval)" />
                                </div>
                                
                                <div class="mb-3">
                                    <label for="nextDueDate" class="form-label">Next Due Date</label>
                                    <InputDate id="nextDueDate" class="form-control" @bind-Value="Task.NextDueDate" />
                                    <ValidationMessage For="@(() => Task.NextDueDate)" />
                                </div>
                                
                                <div class="mb-3">
                                    <label for="applianceId" class="form-label">Associated Appliance</label>
                                    <InputSelect id="applianceId" class="form-select" @bind-Value="Task.ApplianceId">
                                        <option value="">No appliance</option>
                                        @if (Appliances != null)
                                        {
                                            @foreach (var appliance in Appliances)
                                            {
                                                <option value="@appliance.Id">@appliance.Name - @appliance.Category</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => Task.ApplianceId)" />
                                </div>
                                
                                <div class="mb-3">
                                    <label for="estimatedTime" class="form-label">Estimated Time (minutes)</label>
                                    <InputNumber id="estimatedTime" class="form-control" @bind-Value="Task.EstimatedTimeMinutes" />
                                    <ValidationMessage For="@(() => Task.EstimatedTimeMinutes)" />
                                </div>
                                
                                <div class="mb-3">
                                    <label for="estimatedCost" class="form-label">Estimated Cost</label>
                                    <InputNumber id="estimatedCost" class="form-control" @bind-Value="Task.EstimatedCost" step="0.01" />
                                    <ValidationMessage For="@(() => Task.EstimatedCost)" />
                                </div>
                            </div>
                        </div>
                        
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Saving...</span>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span>Save Changes</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="bi bi-exclamation-triangle fs-1 text-muted"></i>
                        <h5 class="mt-3">Task Not Found</h5>
                        <p class="text-muted">The requested task could not be loaded.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public MaintenanceTask? Task { get; set; }
    [Parameter] public IEnumerable<Appliance>? Appliances { get; set; }
    [Parameter] public EventCallback OnTaskUpdated { get; set; }
    
    private bool isSubmitting = false;
    
    public async Task ShowAsync()
    {
        try
        {
            Console.WriteLine("TaskEditModal.ShowAsync called");
            await JSRuntime.InvokeVoidAsync("showModal", "taskEditModal");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error showing task edit modal: {ex.Message}");
        }
    }
    
    private async Task SaveTask()
    {
        if (Task == null) return;
        
        isSubmitting = true;
        
        try
        {
            var response = await Http.PutAsJsonAsync($"http://localhost:5062/api/maintenancetasks/{Task.Id}", Task);
            
            if (response.IsSuccessStatusCode)
            {
                // Close modal
                await JSRuntime.InvokeVoidAsync("hideModal", "taskEditModal");
                
                // Notify parent
                await OnTaskUpdated.InvokeAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error updating task: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating task: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
} 