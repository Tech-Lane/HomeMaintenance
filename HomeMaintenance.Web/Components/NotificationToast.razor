@inject IJSRuntime JSRuntime

<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1055;">
    <div class="toast @(IsVisible ? "show" : "")" id="notificationToast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header @GetHeaderClass()">
            <i class="bi @GetIcon() me-2"></i>
            <strong class="me-auto">@Title</strong>
            <small>@DateTime.Now.ToString("HH:mm")</small>
            <button type="button" class="btn-close" @onclick="Hide"></button>
        </div>
        <div class="toast-body">
            @Message
        </div>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Message { get; set; } = "";
    [Parameter] public NotificationType Type { get; set; } = NotificationType.Info;
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback OnHide { get; set; }

    public enum NotificationType
    {
        Success,
        Error,
        Warning,
        Info
    }

    private string GetHeaderClass()
    {
        return Type switch
        {
            NotificationType.Success => "bg-success text-white",
            NotificationType.Error => "bg-danger text-white",
            NotificationType.Warning => "bg-warning text-dark",
            _ => "bg-info text-white"
        };
    }

    private string GetIcon()
    {
        return Type switch
        {
            NotificationType.Success => "bi-check-circle",
            NotificationType.Error => "bi-exclamation-triangle",
            NotificationType.Warning => "bi-exclamation-triangle",
            _ => "bi-info-circle"
        };
    }

    public async Task ShowAsync(string title, string message, NotificationType type = NotificationType.Info)
    {
        Title = title;
        Message = message;
        Type = type;
        IsVisible = true;
        StateHasChanged();

        // Auto-hide after 5 seconds
        await Task.Delay(5000);
        await HideAsync();
    }

    public async Task HideAsync()
    {
        IsVisible = false;
        await OnHide.InvokeAsync();
        StateHasChanged();
    }

    private async Task Hide()
    {
        await HideAsync();
    }
} 