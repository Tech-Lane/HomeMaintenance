@page "/chores"
@rendermode InteractiveServer
@using HomeMaintenance.Core.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<ConfirmationDialog @ref="confirmationDialog" 
                   Title="Delete Chore" 
                   Message="Are you sure you want to delete this chore?" 
                   Details="This action cannot be undone. All completion records will also be removed."
                   ConfirmText="Delete Chore"
                   OnConfirm="ConfirmDeleteChore" />

<TaskCompletionModal @ref="taskCompletionModal"
                    TaskType="Chore"
                    TaskId="@choreToComplete"
                    OnTaskCompleted="OnTaskCompleted" />

<ChoreViewModal @ref="choreViewModal"
               Chore="@choreToView"
               OnEdit="EditChore" />

<ChoreEditModal @ref="choreEditModal"
               Chore="@choreToEdit"
               OnChoreUpdated="OnTaskCompleted" />

<PageTitle>Chores - Home Maintenance</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-5">ðŸ“‹ Chores</h1>
                    <p class="lead">Manage household chores and daily tasks</p>
                </div>
                <a href="/chores/add" class="btn btn-primary">
                    <i class="bi bi-plus-circle"></i> Add Chore
                </a>
            </div>
        </div>
    </div>

    <!-- Quick Stats -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card text-white bg-danger">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@(overdueChores?.Count() ?? 0)</h4>
                            <p class="card-text">Overdue</p>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-exclamation-triangle fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-warning">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@(dueToday?.Count() ?? 0)</h4>
                            <p class="card-text">Due Today</p>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-calendar-day fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-info">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@(dueThisWeek?.Count() ?? 0)</h4>
                            <p class="card-text">Due This Week</p>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-calendar-week fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-white bg-success">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@(completedThisWeek?.Count() ?? 0)</h4>
                            <p class="card-text">Completed This Week</p>
                        </div>
                        <div class="align-self-center">
                            <i class="bi bi-check-circle fs-1"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-2">
                            <label for="statusFilter" class="form-label">Status</label>
                            <select id="statusFilter" class="form-select" @bind="statusFilter" @bind:after="FilterChores">
                                <option value="">All</option>
                                <option value="overdue">Overdue</option>
                                <option value="due-today">Due Today</option>
                                <option value="due-this-week">Due This Week</option>
                                <option value="completed">Completed</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="categoryFilter" class="form-label">Category</label>
                            <select id="categoryFilter" class="form-select" @bind="categoryFilter" @bind:after="FilterChores">
                                <option value="">All Categories</option>
                                <option value="Kitchen">Kitchen</option>
                                <option value="Bathroom">Bathroom</option>
                                <option value="Bedroom">Bedroom</option>
                                <option value="Living Room">Living Room</option>
                                <option value="Laundry">Laundry</option>
                                <option value="Outdoor">Outdoor</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label for="priorityFilter" class="form-label">Priority</label>
                            <select id="priorityFilter" class="form-select" @bind="priorityFilter" @bind:after="FilterChores">
                                <option value="">All</option>
                                <option value="High">High</option>
                                <option value="Medium">Medium</option>
                                <option value="Low">Low</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="assignedFilter" class="form-label">Assigned To</label>
                            <input type="text" id="assignedFilter" class="form-control" placeholder="Filter by assigned person" @bind="assignedFilter" @bind:after="FilterChores" />
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                                <i class="bi bi-x-circle"></i> Clear Filters
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Chores Table -->
    <div class="row">
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Chore</th>
                                    <th>Category</th>
                                    <th>Due Date</th>
                                    <th>Frequency</th>
                                    <th>Priority</th>
                                    <th>Assigned To</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (filteredChores?.Any() == true)
                                {
                                    @foreach (var chore in filteredChores)
                                    {
                                        <tr>
                                            <td>
                                                <div>
                                                    <strong>@chore.Title</strong>
                                                    @if (!string.IsNullOrEmpty(chore.Description))
                                                    {
                                                        <br><small class="text-muted">@chore.Description</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@(chore.Category ?? "General")</span>
                                            </td>
                                            <td>
                                                @if (chore.DueDate.HasValue)
                                                {
                                                    var daysUntilDue = (chore.DueDate.Value.Date - DateTime.Now.Date).Days;
                                                    var statusClass = daysUntilDue < 0 ? "text-danger" : 
                                                                   daysUntilDue == 0 ? "text-warning" : 
                                                                   daysUntilDue <= 7 ? "text-info" : "text-success";
                                                    <span class="@statusClass">
                                                        @chore.DueDate.Value.ToString("MMM dd, yyyy")
                                                        @if (daysUntilDue < 0)
                                                        {
                                                            <br><small class="text-danger">@Math.Abs(daysUntilDue) days overdue</small>
                                                        }
                                                        else if (daysUntilDue == 0)
                                                        {
                                                            <br><small class="text-warning">Due today</small>
                                                        }
                                                        else if (daysUntilDue <= 7)
                                                        {
                                                            <br><small class="text-info">@daysUntilDue days left</small>
                                                        }
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Not scheduled</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(chore.Frequency))
                                                {
                                                    <span class="badge bg-info">
                                                        @chore.Frequency @(chore.FrequencyInterval > 1 ? $"({chore.FrequencyInterval})" : "")
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">One-time</span>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-@(chore.Priority?.ToLower() switch { "high" => "danger", "medium" => "warning", _ => "secondary" })">
                                                    @chore.Priority
                                                </span>
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(chore.AssignedTo))
                                                {
                                                    <span class="badge bg-primary">@chore.AssignedTo</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Unassigned</span>
                                                }
                                            </td>
                                            <td>
                                                @{
                                                    var choreStatus = chore.DueDate switch
                                                    {
                                                        var date when date?.Date < DateTime.Now.Date => "Overdue",
                                                        var date when date?.Date == DateTime.Now.Date => "Due Today",
                                                        var date when date?.Date <= DateTime.Now.Date.AddDays(7) => "Due Soon",
                                                        _ => "Scheduled"
                                                    };
                                                    var choreStatusClass = choreStatus switch
                                                    {
                                                        "Overdue" => "danger",
                                                        "Due Today" => "warning",
                                                        "Due Soon" => "info",
                                                        _ => "success"
                                                    };
                                                }
                                                <span class="badge bg-@choreStatusClass">@choreStatus</span>
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-outline-primary" @onclick="@(() => ViewChore(chore.Id))" title="View Details">
                                                        <i class="bi bi-eye"></i> View
                                                    </button>
                                                    <button class="btn btn-outline-success" @onclick="@(() => CompleteChore(chore.Id))" title="Mark as Complete">
                                                        <i class="bi bi-check-circle"></i> Complete
                                                    </button>
                                                    <button class="btn btn-outline-warning" @onclick="@(() => EditChore(chore.Id))" title="Edit Chore">
                                                        <i class="bi bi-pencil"></i> Edit
                                                    </button>
                                                    <button class="btn btn-outline-danger" @onclick="@(() => DeleteChore(chore.Id))" title="Delete Chore">
                                                        <i class="bi bi-trash"></i> Delete
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="8" class="text-center py-4">
                                            <i class="bi bi-list-check fs-1 text-muted"></i>
                                            <h5 class="mt-3">No Chores Found</h5>
                                            <p class="text-muted">Get started by adding your first chore.</p>
                                            <a href="/chores/add" class="btn btn-primary">
                                                <i class="bi bi-plus-circle"></i> Add Your First Chore
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    @if (totalPages > 1)
    {
        <div class="row mt-4">
            <div class="col">
                <nav>
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="@(() => ChangePage(currentPage - 1))">Previous</button>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <button class="page-link" @onclick="@(() => ChangePage(i))">@i</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="@(() => ChangePage(currentPage + 1))">Next</button>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>

@code {
    private IEnumerable<Chore>? allChores;
    private IEnumerable<Chore>? filteredChores;
    private IEnumerable<Chore>? overdueChores;
    private IEnumerable<Chore>? dueToday;
    private IEnumerable<Chore>? dueThisWeek;
    private IEnumerable<Chore>? completedThisWeek;
    
    private string statusFilter = "";
    private string categoryFilter = "";
    private string priorityFilter = "";
    private string assignedFilter = "";
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            // Load all chores
            allChores = await Http.GetFromJsonAsync<IEnumerable<Chore>>("http://localhost:5062/api/chores");
            
            // Load overdue chores
            overdueChores = await Http.GetFromJsonAsync<IEnumerable<Chore>>("http://localhost:5062/api/chores/overdue");
            
            // Load upcoming chores
            var upcomingChores = await Http.GetFromJsonAsync<IEnumerable<Chore>>("http://localhost:5062/api/chores/upcoming");
            
            // Calculate stats
            var now = DateTime.Now.Date;
            var weekEnd = now.AddDays(7);
            
            dueToday = allChores?.Where(c => c.DueDate?.Date == now) ?? new List<Chore>();
            dueThisWeek = allChores?.Where(c => c.DueDate >= now && c.DueDate <= weekEnd) ?? new List<Chore>();
            completedThisWeek = allChores?.Where(c => c.LastCompletedDate >= now.AddDays(-7)) ?? new List<Chore>();
            
            FilterChores();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
            allChores = new List<Chore>();
        }
    }

    private void FilterChores()
    {
        if (allChores == null)
        {
            filteredChores = new List<Chore>();
            return;
        }

        var filtered = allChores.AsEnumerable();

        // Apply status filter
        if (!string.IsNullOrEmpty(statusFilter))
        {
            var now = DateTime.Now.Date;
            filtered = statusFilter switch
            {
                "overdue" => filtered.Where(c => c.DueDate < now),
                "due-today" => filtered.Where(c => c.DueDate?.Date == now),
                "due-this-week" => filtered.Where(c => c.DueDate >= now && c.DueDate <= now.AddDays(7)),
                "completed" => filtered.Where(c => c.LastCompletedDate.HasValue),
                _ => filtered
            };
        }

        // Apply category filter
        if (!string.IsNullOrEmpty(categoryFilter))
        {
            filtered = filtered.Where(c => c.Category == categoryFilter);
        }

        // Apply priority filter
        if (!string.IsNullOrEmpty(priorityFilter))
        {
            filtered = filtered.Where(c => c.Priority == priorityFilter);
        }

        // Apply assigned filter
        if (!string.IsNullOrEmpty(assignedFilter))
        {
            filtered = filtered.Where(c => c.AssignedTo?.Contains(assignedFilter, StringComparison.OrdinalIgnoreCase) == true);
        }

        // Apply pagination
        totalPages = (int)Math.Ceiling((double)filtered.Count() / pageSize);
        currentPage = Math.Max(1, Math.Min(currentPage, totalPages));
        
        filteredChores = filtered
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ClearFilters()
    {
        statusFilter = "";
        categoryFilter = "";
        priorityFilter = "";
        assignedFilter = "";
        currentPage = 1;
        FilterChores();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        FilterChores();
    }

    private TaskCompletionModal? taskCompletionModal;
    private int choreToComplete = 0;

    private async Task CompleteChore(int choreId)
    {
        try
        {
            Console.WriteLine($"Completing chore {choreId}");
            choreToComplete = choreId;
            await taskCompletionModal!.ShowAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in CompleteChore: {ex.Message}");
        }
    }

    private async Task OnTaskCompleted()
    {
        await LoadData();
    }

    private ConfirmationDialog? confirmationDialog;
    private int choreToDelete = 0;

    private async Task DeleteChore(int choreId)
    {
        try
        {
            Console.WriteLine($"Deleting chore {choreId}");
            choreToDelete = choreId;
            await confirmationDialog!.ShowAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DeleteChore: {ex.Message}");
        }
    }

    private async Task ConfirmDeleteChore()
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5062/api/chores/{choreToDelete}");
            if (response.IsSuccessStatusCode)
            {
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting chore: {ex.Message}");
        }
    }

    private ChoreViewModal? choreViewModal;
    private ChoreEditModal? choreEditModal;
    private Chore? choreToView;
    private Chore? choreToEdit;

    private async Task ViewChore(int choreId)
    {
        try
        {
            choreToView = await Http.GetFromJsonAsync<Chore>($"http://localhost:5062/api/chores/{choreId}");
            if (choreToView != null)
            {
                await choreViewModal!.ShowAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chore for view: {ex.Message}");
        }
    }

    private async Task EditChore(int choreId)
    {
        try
        {
            choreToEdit = await Http.GetFromJsonAsync<Chore>($"http://localhost:5062/api/chores/{choreId}");
            if (choreToEdit != null)
            {
                await choreEditModal!.ShowAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chore for edit: {ex.Message}");
        }
    }


} 