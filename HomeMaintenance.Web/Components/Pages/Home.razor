@page "/"
@rendermode InteractiveServer
@using HomeMaintenance.Core.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Dashboard - Home Maintenance</PageTitle>

<div class="container-fluid">
    <!-- Modern Header -->
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-4 fw-bold text-gradient">🏠 Home Maintenance</h1>
                    <p class="lead text-muted">Your complete home management solution</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" @onclick="RefreshData">
                        <i class="bi bi-arrow-clockwise"></i> Refresh
                    </button>
                    <button class="btn btn-primary" @onclick="NavigateToAddAppliance">
                        <i class="bi bi-plus-circle"></i> Quick Add
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Enhanced Stats Cards -->
    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="card stat-card bg-gradient-primary border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="card-title text-white mb-1">@(appliances?.Count() ?? 0)</h3>
                            <p class="card-text text-white-50 mb-0">Appliances</p>
                            <small class="text-white-75">@(totalValue?.ToString("C") ?? "$0") total value</small>
                        </div>
                        <div class="stat-icon">
                            <i class="bi bi-tools text-white"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stat-card bg-gradient-warning border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="card-title text-white mb-1">@(maintenanceTasks?.Count() ?? 0)</h3>
                            <p class="card-text text-white-50 mb-0">Maintenance Tasks</p>
                            <small class="text-white-75">@((overdueTasks?.Count() ?? 0)) overdue</small>
                        </div>
                        <div class="stat-icon">
                            <i class="bi bi-wrench text-white"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stat-card bg-gradient-info border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="card-title text-white mb-1">@(chores?.Count() ?? 0)</h3>
                            <p class="card-text text-white-50 mb-0">Chores</p>
                            <small class="text-white-75">@((overdueChores?.Count() ?? 0)) overdue</small>
                        </div>
                        <div class="stat-icon">
                            <i class="bi bi-list-check text-white"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3 mb-3">
            <div class="card stat-card bg-gradient-success border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h3 class="card-title text-white mb-1">@(completedThisMonth.ToString())</h3>
                            <p class="card-text text-white-50 mb-0">Completed This Month</p>
                            <small class="text-white-75">@(completionRate.ToString("P0")) success rate</small>
                        </div>
                        <div class="stat-icon">
                            <i class="bi bi-check-circle text-white"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Alert Banner for Critical Items -->
    @if ((overdueTasks?.Any() == true) || (overdueChores?.Any() == true))
    {
        <div class="row mb-4">
            <div class="col">
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        <div>
                            <strong>Attention!</strong> You have @((overdueTasks?.Count() ?? 0) + (overdueChores?.Count() ?? 0)) overdue items that need immediate attention.
                        </div>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            </div>
        </div>
    }

    <!-- Main Content Grid -->
    <div class="row">
        <!-- Left Column -->
        <div class="col-lg-8">
            <!-- Overdue Items -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-danger text-white">
                    <h5 class="mb-0"><i class="bi bi-exclamation-triangle"></i> Critical Items</h5>
                </div>
                <div class="card-body">
                    @if (overdueTasks?.Any() == true || overdueChores?.Any() == true)
                    {
                        <div class="list-group list-group-flush">
                            @if (overdueTasks?.Any() == true)
                            {
                                @foreach (var task in (overdueTasks?.Take(5) ?? new List<MaintenanceTask>()))
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center border-0">
                                        <div class="d-flex align-items-center">
                                            <div class="me-3">
                                                <i class="bi bi-wrench text-danger"></i>
                                            </div>
                                            <div>
                                                <strong>@task.Title</strong>
                                                <br><small class="text-muted">Maintenance Task</small>
                                            </div>
                                        </div>
                                        <div class="text-end">
                                            <span class="badge bg-danger">@((DateTime.Now - task.NextDueDate!.Value).Days) days overdue</span>
                                            <br><small class="text-muted">@task.Appliance?.Name</small>
                                        </div>
                                    </div>
                                }
                            }
                            @if (overdueChores?.Any() == true)
                            {
                                @foreach (var chore in (overdueChores?.Take(5) ?? new List<Chore>()))
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center border-0">
                                        <div class="d-flex align-items-center">
                                            <div class="me-3">
                                                <i class="bi bi-list-check text-danger"></i>
                                            </div>
                                            <div>
                                                <strong>@chore.Title</strong>
                                                <br><small class="text-muted">Chore</small>
                                            </div>
                                        </div>
                                        <div class="text-end">
                                            <span class="badge bg-danger">@((DateTime.Now - chore.DueDate!.Value).Days) days overdue</span>
                                            <br><small class="text-muted">@chore.AssignedTo</small>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        @if ((overdueTasks?.Count() ?? 0) + (overdueChores?.Count() ?? 0) > 10)
                        {
                            <div class="text-center mt-3">
                                <a href="/maintenance-tasks" class="btn btn-outline-danger btn-sm">View All Critical Items</a>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-check-circle text-success" style="font-size: 3rem;"></i>
                            <h5 class="mt-3 text-success">All Caught Up!</h5>
                            <p class="text-muted">No overdue items. Great job staying on top of maintenance.</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Due This Week -->
            <div class="card shadow-sm mb-4">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0"><i class="bi bi-calendar-week"></i> Due This Week</h5>
                </div>
                <div class="card-body">
                    @if ((dueTasks?.Any() == true) || (dueChores?.Any() == true))
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var task in (dueTasks?.Take(3) ?? new List<MaintenanceTask>()))
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0">
                                    <div class="d-flex align-items-center">
                                        <div class="me-3">
                                            <i class="bi bi-wrench text-warning"></i>
                                        </div>
                                        <div>
                                            <strong>@task.Title</strong>
                                            <br><small class="text-muted">Maintenance Task</small>
                                        </div>
                                    </div>
                                    <div class="text-end">
                                        <span class="badge bg-warning">@task.NextDueDate?.ToString("MMM dd")</span>
                                        <br><small class="text-muted">@task.Appliance?.Name</small>
                                    </div>
                                </div>
                            }
                            @foreach (var chore in (dueChores?.Take(3) ?? new List<Chore>()))
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center border-0">
                                    <div class="d-flex align-items-center">
                                        <div class="me-3">
                                            <i class="bi bi-list-check text-warning"></i>
                                        </div>
                                        <div>
                                            <strong>@chore.Title</strong>
                                            <br><small class="text-muted">Chore</small>
                                        </div>
                                    </div>
                                    <div class="text-end">
                                        <span class="badge bg-warning">@chore.DueDate?.ToString("MMM dd")</span>
                                        <br><small class="text-muted">@chore.AssignedTo</small>
                                    </div>
                                </div>
                            }
                        </div>
                        @if ((dueTasks?.Count() ?? 0) + (dueChores?.Count() ?? 0) > 6)
                        {
                            <div class="text-center mt-3">
                                <a href="/maintenance-tasks" class="btn btn-outline-warning btn-sm">View All Due Items</a>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-calendar-check text-warning" style="font-size: 3rem;"></i>
                            <h5 class="mt-3 text-warning">Clear Schedule</h5>
                            <p class="text-muted">No items due this week. You're all caught up!</p>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column -->
        <div class="col-lg-4">
            <!-- Quick Actions -->
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-lightning"></i> Quick Actions</h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <a href="/appliances/add" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Add Appliance
                        </a>
                        <a href="/maintenance-tasks/add" class="btn btn-warning">
                            <i class="bi bi-plus-circle"></i> Add Maintenance Task
                        </a>
                        <a href="/chores/add" class="btn btn-info">
                            <i class="bi bi-plus-circle"></i> Add Chore
                        </a>
                        <hr>
                        <a href="/appliances" class="btn btn-outline-primary">
                            <i class="bi bi-tools"></i> Manage Appliances
                        </a>
                        <a href="/maintenance-tasks" class="btn btn-outline-warning">
                            <i class="bi bi-wrench"></i> View Tasks
                        </a>
                        <a href="/chores" class="btn btn-outline-info">
                            <i class="bi bi-list-check"></i> View Chores
                        </a>
                    </div>
                </div>
            </div>

            <!-- System Status -->
            <div class="card shadow-sm mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-graph-up"></i> System Status</h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-6">
                            <h4 class="text-primary">@(appliances?.Count() ?? 0)</h4>
                            <small class="text-muted">Appliances</small>
                        </div>
                        <div class="col-6">
                            <h4 class="text-warning">@(maintenanceTasks?.Count() ?? 0)</h4>
                            <small class="text-muted">Tasks</small>
                        </div>
                    </div>
                    <hr>
                    <div class="row text-center">
                        <div class="col-6">
                            <h4 class="text-info">@(chores?.Count() ?? 0)</h4>
                            <small class="text-muted">Chores</small>
                        </div>
                        <div class="col-6">
                            <h4 class="text-success">@(totalValue?.ToString("C0") ?? "$0")</h4>
                            <small class="text-muted">Value</small>
                        </div>
                    </div>
                    <hr>
                    <div class="text-center">
                        <div class="progress mb-2">
                            <div class="progress-bar bg-success" role="progressbar" 
                                 style="width: @(completionRate * 100)%" 
                                 aria-valuenow="@(completionRate * 100)" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100">
                                @(completionRate.ToString("P0"))
                            </div>
                        </div>
                        <small class="text-muted">Completion Rate</small>
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="card shadow-sm">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-clock-history"></i> Recent Activity</h5>
                </div>
                <div class="card-body">
                    <div class="list-group list-group-flush">
                        <div class="list-group-item border-0">
                            <div class="d-flex w-100 justify-content-between">
                                <h6 class="mb-1">System Online</h6>
                                <small class="text-muted">@DateTime.Now.ToString("MMM dd")</small>
                            </div>
                            <p class="mb-1 text-muted">Home Maintenance system is running smoothly</p>
                        </div>
                        @if (appliances?.Any() == true)
                        {
                            <div class="list-group-item border-0">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">Data Loaded</h6>
                                    <small class="text-muted">@DateTime.Now.ToString("MMM dd")</small>
                                </div>
                                <p class="mb-1 text-muted">@(appliances.Count()) appliances, @(maintenanceTasks?.Count() ?? 0) tasks, @(chores?.Count() ?? 0) chores</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<Appliance>? appliances;
    private IEnumerable<MaintenanceTask>? maintenanceTasks;
    private IEnumerable<Chore>? chores;
    private IEnumerable<MaintenanceTask>? overdueTasks;
    private IEnumerable<Chore>? overdueChores;
    private IEnumerable<MaintenanceTask>? dueTasks;
    private IEnumerable<Chore>? dueChores;
    private decimal? totalValue;
    private int completedThisMonth;
    private double completionRate;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task RefreshData()
    {
        await LoadDashboardData();
        StateHasChanged();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load data sequentially for simplicity
            appliances = await Http.GetFromJsonAsync<IEnumerable<Appliance>>("http://localhost:5062/api/appliances") ?? new List<Appliance>();
            maintenanceTasks = await Http.GetFromJsonAsync<IEnumerable<MaintenanceTask>>("http://localhost:5062/api/maintenancetasks") ?? new List<MaintenanceTask>();
            chores = await Http.GetFromJsonAsync<IEnumerable<Chore>>("http://localhost:5062/api/chores") ?? new List<Chore>();
            overdueTasks = await Http.GetFromJsonAsync<IEnumerable<MaintenanceTask>>("http://localhost:5062/api/maintenancetasks/overdue") ?? new List<MaintenanceTask>();
            overdueChores = await Http.GetFromJsonAsync<IEnumerable<Chore>>("http://localhost:5062/api/chores/overdue") ?? new List<Chore>();

            // Calculate total value
            totalValue = appliances?.Where(a => a.PurchasePrice.HasValue).Sum(a => a.PurchasePrice!.Value) ?? 0;

            // Calculate due this week
            var now = DateTime.Now;
            var weekEnd = now.AddDays(7);
            
            dueTasks = maintenanceTasks?.Where(t => t.NextDueDate >= now && t.NextDueDate <= weekEnd) ?? new List<MaintenanceTask>();
            dueChores = chores?.Where(c => c.DueDate >= now && c.DueDate <= weekEnd) ?? new List<Chore>();

            // Calculate completion statistics
            var thisMonth = new DateTime(now.Year, now.Month, 1);
            var completedTasks = maintenanceTasks?.Where(t => t.LastCompletedDate >= thisMonth)?.Count() ?? 0;
            var completedChores = chores?.Where(c => c.LastCompletedDate >= thisMonth)?.Count() ?? 0;
            completedThisMonth = completedTasks + completedChores;

            var totalItems = (maintenanceTasks?.Count() ?? 0) + (chores?.Count() ?? 0);
            completionRate = totalItems > 0 ? (double)completedThisMonth / totalItems : 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
            appliances = new List<Appliance>();
            maintenanceTasks = new List<MaintenanceTask>();
            chores = new List<Chore>();
            overdueTasks = new List<MaintenanceTask>();
            overdueChores = new List<Chore>();
            dueTasks = new List<MaintenanceTask>();
            dueChores = new List<Chore>();
            completedThisMonth = 0;
            completionRate = 0;
        }
    }

    private void NavigateToAddAppliance()
    {
        Navigation.NavigateTo("/appliances/add");
    }
}
