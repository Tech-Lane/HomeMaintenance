@page "/maintenance-tasks/{Id:int}"
@using HomeMaintenance.Core.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<ConfirmationDialog @ref="confirmationDialog" 
                   Title="Delete Maintenance Task" 
                   Message="Are you sure you want to delete this maintenance task?" 
                   Details="This action cannot be undone. All completion records will also be removed."
                   ConfirmText="Delete Task"
                   OnConfirm="ConfirmDeleteTask" />

<TaskCompletionModal @ref="taskCompletionModal"
                    TaskType="Maintenance Task"
                    TaskId="@Id"
                    OnTaskCompleted="OnTaskCompleted" />

<PageTitle>Maintenance Task Details - Home Maintenance</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-5">ðŸ”§ Maintenance Task Details</h1>
                    <p class="lead">View and manage maintenance task information</p>
                </div>
                <div>
                    <button class="btn btn-success me-2" @onclick="CompleteTask">
                        <i class="bi bi-check-circle"></i> Mark Complete
                    </button>
                    <a href="/maintenance-tasks/@Id/edit" class="btn btn-warning me-2">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    <a href="/maintenance-tasks" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Tasks
                    </a>
                </div>
            </div>
        </div>
    </div>

    @if (task != null)
    {
        <div class="row">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Task Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Title</h6>
                                <p class="mb-3">@task.Title</p>
                                
                                <h6>Description</h6>
                                <p class="mb-3">@(task.Description ?? "No description provided")</p>
                                
                                <h6>Instructions</h6>
                                <p class="mb-3">@(task.Instructions ?? "No instructions provided")</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Frequency</h6>
                                <p class="mb-3">@task.Frequency every @task.FrequencyInterval @(task.FrequencyInterval == 1 ? "time" : "times")</p>
                                
                                <h6>Priority</h6>
                                <span class="badge bg-@GetPriorityClass(task.Priority) mb-3">@task.Priority</span>
                                
                                <h6>Status</h6>
                                <span class="badge bg-@GetStatusClass() mb-3">@GetStatusText()</span>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Next Due Date</h6>
                                <p class="mb-3">@(task.NextDueDate?.ToString("MMMM dd, yyyy") ?? "Not set")</p>
                                
                                <h6>Last Completed</h6>
                                <p class="mb-3">@(task.LastCompletedDate?.ToString("MMMM dd, yyyy") ?? "Never completed")</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Estimated Time</h6>
                                <p class="mb-3">@(task.EstimatedTimeMinutes?.ToString() ?? "Not specified") minutes</p>
                                
                                <h6>Estimated Cost</h6>
                                <p class="mb-3">@(task.EstimatedCost?.ToString("C") ?? "Not specified")</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Quick Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-success" @onclick="CompleteTask">
                                <i class="bi bi-check-circle"></i> Mark as Complete
                            </button>
                            <a href="/maintenance-tasks/@Id/edit" class="btn btn-primary">
                                <i class="bi bi-pencil"></i> Edit Task
                            </a>
                            <button class="btn btn-danger" @onclick="DeleteTask">
                                <i class="bi bi-trash"></i> Delete Task
                            </button>
                        </div>
                    </div>
                </div>

                @if (task.Appliance != null)
                {
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="mb-0">Associated Appliance</h5>
                        </div>
                        <div class="card-body">
                            <h6>@task.Appliance.Name</h6>
                            <p class="text-muted mb-2">@(task.Appliance.Brand ?? "") @(task.Appliance.Model ?? "")</p>
                            <p class="text-muted mb-0">@(task.Appliance.Location ?? "No location specified")</p>
                            <a href="/appliances/@task.Appliance.Id" class="btn btn-sm btn-outline-primary mt-2">
                                <i class="bi bi-eye"></i> View Appliance
                            </a>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else if (isLoading)
    {
        <div class="row">
            <div class="col">
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3">Loading task details...</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col">
                <div class="text-center py-5">
                    <i class="bi bi-exclamation-triangle fs-1 text-warning"></i>
                    <h3 class="mt-3">Task Not Found</h3>
                    <p class="text-muted">The maintenance task you're looking for doesn't exist or has been removed.</p>
                    <a href="/maintenance-tasks" class="btn btn-primary">
                        <i class="bi bi-arrow-left"></i> Back to Tasks
                    </a>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private MaintenanceTask? task;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadTask();
    }

    private async Task LoadTask()
    {
        try
        {
            task = await Http.GetFromJsonAsync<MaintenanceTask>($"http://localhost:5062/api/maintenancetasks/{Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading task: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetPriorityClass(string priority)
    {
        return priority.ToLower() switch
        {
            "critical" => "danger",
            "high" => "warning",
            "medium" => "info",
            "low" => "secondary",
            _ => "secondary"
        };
    }

    private string GetStatusClass()
    {
        if (task == null) return "secondary";
        
        if (task.LastCompletedDate.HasValue && task.NextDueDate.HasValue && task.LastCompletedDate.Value >= task.NextDueDate.Value)
            return "success";
        
        if (task.NextDueDate.HasValue && task.NextDueDate.Value < DateTime.Now)
            return "danger";
        
        if (task.NextDueDate.HasValue && task.NextDueDate.Value <= DateTime.Now.AddDays(7))
            return "warning";
        
        return "info";
    }

    private string GetStatusText()
    {
        if (task == null) return "Unknown";
        
        if (task.LastCompletedDate.HasValue && task.NextDueDate.HasValue && task.LastCompletedDate.Value >= task.NextDueDate.Value)
            return "Completed";
        
        if (task.NextDueDate.HasValue && task.NextDueDate.Value < DateTime.Now)
            return "Overdue";
        
        if (task.NextDueDate.HasValue && task.NextDueDate.Value <= DateTime.Now.AddDays(7))
            return "Due Soon";
        
        return "Upcoming";
    }

    private TaskCompletionModal? taskCompletionModal;

    private async Task CompleteTask()
    {
        await taskCompletionModal!.ShowAsync();
    }

    private async Task OnTaskCompleted()
    {
        await LoadTask();
    }

    private ConfirmationDialog? confirmationDialog;

    private async Task DeleteTask()
    {
        await confirmationDialog!.ShowAsync();
    }

    private async Task ConfirmDeleteTask()
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5062/api/maintenancetasks/{Id}");
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/maintenance-tasks");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting task: {ex.Message}");
        }
    }
} 