@page "/chores/{Id:int}"
@using HomeMaintenance.Core.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<ConfirmationDialog @ref="confirmationDialog" 
                   Title="Delete Chore" 
                   Message="Are you sure you want to delete this chore?" 
                   Details="This action cannot be undone. All completion records will also be removed."
                   ConfirmText="Delete Chore"
                   OnConfirm="ConfirmDeleteChore" />

<TaskCompletionModal @ref="taskCompletionModal"
                    TaskType="Chore"
                    TaskId="@Id"
                    OnTaskCompleted="OnTaskCompleted" />

<PageTitle>Chore Details - Home Maintenance</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-5">ðŸ“‹ Chore Details</h1>
                    <p class="lead">View and manage chore information</p>
                </div>
                <div>
                    <a href="/chores/@Id/edit" class="btn btn-warning me-2">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    <a href="/chores" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Chores
                    </a>
                </div>
            </div>
        </div>
    </div>

    @if (chore != null)
    {
        <div class="row">
            <!-- Chore Information -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Chore Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Title</label>
                                    <div>@chore.Title</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Category</label>
                                    <div>
                                        @if (!string.IsNullOrEmpty(chore.Category))
                                        {
                                            <span class="badge bg-secondary">@chore.Category</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not specified</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Priority</label>
                                    <div>
                                        <span class="badge bg-@(chore.Priority?.ToLower() switch { "high" => "danger", "medium" => "warning", _ => "secondary" })">
                                            @chore.Priority
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Assigned To</label>
                                    <div>
                                        @if (!string.IsNullOrEmpty(chore.AssignedTo))
                                        {
                                            <span class="badge bg-primary">@chore.AssignedTo</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Unassigned</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Due Date</label>
                                    <div>
                                        @if (chore.DueDate.HasValue)
                                        {
                                            var daysUntilDue = (chore.DueDate.Value.Date - DateTime.Now.Date).Days;
                                            var statusClass = daysUntilDue < 0 ? "text-danger" : 
                                                           daysUntilDue == 0 ? "text-warning" : 
                                                           daysUntilDue <= 7 ? "text-info" : "text-success";
                                            <span class="@statusClass">
                                                @chore.DueDate.Value.ToString("MMM dd, yyyy")
                                                @if (daysUntilDue < 0)
                                                {
                                                    <br><small class="text-danger">@Math.Abs(daysUntilDue) days overdue</small>
                                                }
                                                else if (daysUntilDue == 0)
                                                {
                                                    <br><small class="text-warning">Due today</small>
                                                }
                                                else if (daysUntilDue <= 7)
                                                {
                                                    <br><small class="text-info">@daysUntilDue days left</small>
                                                }
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not scheduled</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Last Completed</label>
                                    <div>@(chore.LastCompletedDate?.ToString("MMM dd, yyyy") ?? "Never completed")</div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Frequency</label>
                                    <div>
                                        @if (!string.IsNullOrEmpty(chore.Frequency))
                                        {
                                            <span class="badge bg-info">
                                                @chore.Frequency @(chore.FrequencyInterval > 1 ? $"({chore.FrequencyInterval})" : "")
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">One-time</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Estimated Duration</label>
                                    <div>@(chore.EstimatedTimeMinutes?.ToString() ?? "Not specified") minutes</div>
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(chore.Description))
                        {
                            <div class="mb-3">
                                <label class="form-label fw-bold">Description</label>
                                <div class="border rounded p-3 bg-light">@chore.Description</div>
                            </div>
                        }

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Reminders</label>
                                    <div>
                                        @if (chore.SendReminders)
                                        {
                                            <span class="badge bg-success">Enabled</span>
                                            <small class="text-muted">@chore.ReminderDaysBefore days before due</small>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Disabled</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label fw-bold">Status</label>
                                    <div>
                                        @{
                                            var choreStatus = chore.DueDate switch
                                            {
                                                var date when date?.Date < DateTime.Now.Date => "Overdue",
                                                var date when date?.Date == DateTime.Now.Date => "Due Today",
                                                var date when date?.Date <= DateTime.Now.Date.AddDays(7) => "Due Soon",
                                                _ => "Scheduled"
                                            };
                                            var choreStatusClass = choreStatus switch
                                            {
                                                "Overdue" => "danger",
                                                "Due Today" => "warning",
                                                "Due Soon" => "info",
                                                _ => "success"
                                            };
                                        }
                                        <span class="badge bg-@choreStatusClass">@choreStatus</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Quick Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                            <button class="btn btn-success" @onclick="CompleteChore">
                                <i class="bi bi-check-circle"></i> Mark as Complete
                            </button>
                            <a href="/chores/@Id/edit" class="btn btn-primary">
                                <i class="bi bi-pencil"></i> Edit Chore
                            </a>
                            <button class="btn btn-danger" @onclick="DeleteChore">
                                <i class="bi bi-trash"></i> Delete Chore
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Completion History -->
                <div class="card mt-3">
                    <div class="card-header">
                        <h5 class="mb-0">Completion History</h5>
                    </div>
                    <div class="card-body">
                        @if (completions?.Any() == true)
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var completion in completions.Take(5))
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex justify-content-between">
                                            <div>
                                                <strong>@completion.CompletedAt.ToString("MMM dd, yyyy")</strong>
                                                @if (!string.IsNullOrEmpty(completion.Notes))
                                                {
                                                    <br><small class="text-muted">@completion.Notes</small>
                                                }
                                                @if (!string.IsNullOrEmpty(completion.CompletedBy))
                                                {
                                                    <br><small class="text-muted">Completed by: @completion.CompletedBy</small>
                                                }
                                            </div>
                                            <div class="text-end">
                                                @if (completion.ActualTimeMinutes.HasValue)
                                                {
                                                    <small class="text-muted">@completion.ActualTimeMinutes.Value min</small><br>
                                                }
                                                @if (completion.DifficultyRating.HasValue)
                                                {
                                                    <small class="text-muted">Difficulty: @completion.DifficultyRating.Value/5</small>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            @if (completions.Count() > 5)
                            {
                                <div class="text-center mt-2">
                                    <small class="text-muted">+@(completions.Count() - 5) more completions</small>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted mb-0">No completion history yet.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else if (isLoading)
    {
        <div class="row">
            <div class="col">
                <div class="text-center py-5">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3">Loading chore details...</p>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col">
                <div class="text-center py-5">
                    <i class="bi bi-exclamation-triangle fs-1 text-warning"></i>
                    <h3 class="mt-3">Chore Not Found</h3>
                    <p class="text-muted">The chore you're looking for doesn't exist or has been removed.</p>
                    <a href="/chores" class="btn btn-primary">
                        <i class="bi bi-arrow-left"></i> Back to Chores
                    </a>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Chore? chore;
    private IEnumerable<ChoreCompletion>? completions;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadChore();
    }

    private async Task LoadChore()
    {
        try
        {
            chore = await Http.GetFromJsonAsync<Chore>($"http://localhost:5062/api/chores/{Id}");
            
            if (chore != null)
            {
                // Load completion history for this chore
                completions = await Http.GetFromJsonAsync<IEnumerable<ChoreCompletion>>($"http://localhost:5062/api/chores/{Id}/completions");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chore: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private TaskCompletionModal? taskCompletionModal;

    private async Task CompleteChore()
    {
        await taskCompletionModal!.ShowAsync();
    }

    private async Task OnTaskCompleted()
    {
        await LoadChore();
    }

    private ConfirmationDialog? confirmationDialog;

    private async Task DeleteChore()
    {
        await confirmationDialog!.ShowAsync();
    }

    private async Task ConfirmDeleteChore()
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5062/api/chores/{Id}");
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/chores");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting chore: {ex.Message}");
        }
    }
} 