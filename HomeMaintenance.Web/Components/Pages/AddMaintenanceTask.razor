@page "/maintenance-tasks/add"
@using HomeMaintenance.Core.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Add Maintenance Task - Home Maintenance</PageTitle>

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="display-5">ðŸ”§ Add Maintenance Task</h1>
                    <p class="lead">Create a new maintenance task for your appliances</p>
                </div>
                <a href="/maintenance-tasks" class="btn btn-outline-secondary">
                    <i class="bi bi-arrow-left"></i> Back to Tasks
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Task Information</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="task" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row">
                            <div class="col-md-8 mb-3">
                                <label for="title" class="form-label">Title *</label>
                                <InputText id="title" class="form-control" @bind-Value="task.Title" />
                                <ValidationMessage For="@(() => task.Title)" />
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="priority" class="form-label">Priority</label>
                                <InputSelect id="priority" class="form-select" @bind-Value="task.Priority">
                                    <option value="">Select Priority</option>
                                    <option value="High">High</option>
                                    <option value="Medium">Medium</option>
                                    <option value="Low">Low</option>
                                </InputSelect>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" class="form-control" rows="3" @bind-Value="task.Description" />
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="applianceId" class="form-label">Appliance (Optional)</label>
                                <InputSelect id="applianceId" class="form-select" @bind-Value="task.ApplianceId">
                                    <option value="">Select Appliance</option>
                                    @if (appliances != null)
                                    {
                                        @foreach (var appliance in appliances)
                                        {
                                            <option value="@appliance.Id">@appliance.Name</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="nextDueDate" class="form-label">Next Due Date</label>
                                <InputDate id="nextDueDate" class="form-control" @bind-Value="task.NextDueDate" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label for="frequency" class="form-label">Frequency</label>
                                <InputSelect id="frequency" class="form-select" @bind-Value="task.Frequency">
                                    <option value="">Select Frequency</option>
                                    <option value="Daily">Daily</option>
                                    <option value="Weekly">Weekly</option>
                                    <option value="Monthly">Monthly</option>
                                    <option value="Yearly">Yearly</option>
                                    <option value="Every 2 Years">Every 2 Years</option>
                                    <option value="Every 5 Years">Every 5 Years</option>
                                    <option value="One-time">One-time</option>
                                </InputSelect>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="frequencyInterval" class="form-label">Interval</label>
                                <InputNumber id="frequencyInterval" class="form-control" @bind-Value="task.FrequencyInterval" />
                                <small class="form-text text-muted">Number of frequency units (e.g., every 2 months)</small>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label for="estimatedTimeMinutes" class="form-label">Estimated Duration (minutes)</label>
                                <InputNumber id="estimatedTimeMinutes" class="form-control" @bind-Value="task.EstimatedTimeMinutes" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="instructions" class="form-label">Instructions</label>
                            <InputTextArea id="instructions" class="form-control" rows="4" @bind-Value="task.Instructions" />
                            <small class="form-text text-muted">Step-by-step instructions for completing this task</small>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="estimatedCost" class="form-label">Estimated Cost</label>
                                <InputNumber id="estimatedCost" class="form-control" @bind-Value="task.EstimatedCost" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="reminderDaysBefore" class="form-label">Reminder Days Before</label>
                                <InputNumber id="reminderDaysBefore" class="form-control" @bind-Value="task.ReminderDaysBefore" />
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a href="/maintenance-tasks" class="btn btn-outline-secondary">
                                <i class="bi bi-x-circle"></i> Cancel
                            </a>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Saving...</span>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle me-2"></i>
                                    <span>Save Task</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private MaintenanceTask task = new();
    private IEnumerable<Appliance>? appliances;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAppliances();
        
        // Initialize with default values
        task.CreatedAt = DateTime.UtcNow;
        task.IsActive = true;
        task.FrequencyInterval = 1;
    }

    private async Task LoadAppliances()
    {
        try
        {
            appliances = await Http.GetFromJsonAsync<IEnumerable<Appliance>>("http://localhost:5062/api/appliances");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading appliances: {ex.Message}");
            appliances = new List<Appliance>();
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5062/api/maintenancetasks", task);
            
            if (response.IsSuccessStatusCode)
            {
                var createdTask = await response.Content.ReadFromJsonAsync<MaintenanceTask>();
                Navigation.NavigateTo($"/maintenance-tasks/{createdTask?.Id}");
            }
            else
            {
                // Handle error
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error creating task: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating task: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
} 