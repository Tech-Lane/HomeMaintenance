@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS

<div class="floorplanner-wrapper">
  <div class="toolbar d-flex flex-wrap gap-2 mb-2">
    <div class="btn-group me-2" role="group" aria-label="Units">
      <button class="btn btn-outline-secondary" @onclick="@(() => SetUnits(\"imperial\"))" disabled="@(_units == "imperial")">Imperial (ft/in)</button>
      <button class="btn btn-outline-secondary" @onclick="@(() => SetUnits(\"metric\"))" disabled="@(_units == "metric")">Metric (m/cm)</button>
    </div>

    <div class="btn-group me-2" role="group" aria-label="Add">
      <button class="btn btn-outline-primary" title="Add room rectangle" @onclick="AddRoomRect"><i class="bi bi-bounding-box"></i> Room</button>
      <button class="btn btn-outline-primary" title="Draw polygon room" @onclick="StartPolyRoom"><i class="bi bi-bezier2"></i> Draw Room</button>
      <button class="btn btn-outline-primary" title="Add furniture" @onclick="AddFurniture"><i class="bi bi-chair"></i> Furniture</button>
      <button class="btn btn-outline-primary" title="Add custom object" @onclick="AddCustom"><i class="bi bi-box"></i> Custom</button>
      <button class="btn btn-outline-primary" title="Add door" @onclick="AddDoor"><i class="bi bi-door-closed"></i> Door</button>
      <button class="btn btn-outline-primary" title="Add window" @onclick="AddWindow"><i class="bi bi-window"></i> Window</button>
    </div>

    <div class="btn-group me-2" role="group" aria-label="Markers">
      <button class="btn btn-outline-info" title="Wi‑Fi AP" @onclick="@(() => AddMarker(\"wifi\"))"><i class="bi bi-wifi"></i> AP</button>
      <button class="btn btn-outline-info" title="Outlet" @onclick="@(() => AddMarker(\"outlet\"))"><i class="bi bi-plug"></i> Outlet</button>
      <button class="btn btn-outline-info" title="Ethernet" @onclick="@(() => AddMarker(\"ethernet\"))"><i class="bi bi-hdd-network"></i> Ethernet</button>
      <button class="btn btn-outline-info" title="Coax" @onclick="@(() => AddMarker(\"coax\"))"><i class="bi bi-circle"></i> Coax</button>
    </div>

    <div class="btn-group me-2" role="group" aria-label="Tools">
      <button class="btn btn-outline-secondary" title="Measure" @onclick="EnableMeasure"><i class="bi bi-rulers"></i> Measure</button>
      <button class="btn btn-outline-secondary" title="Snap grid" @onclick="ToggleSnap"><i class="bi bi-grid"></i> Snap</button>
      <button class="btn btn-outline-danger" title="Delete selected" @onclick="DeleteSelected"><i class="bi bi-trash"></i></button>
    </div>

    <div class="btn-group me-2" role="group" aria-label="Heatmap">
      <button class="btn btn-outline-info" @onclick="ToggleHeatmap"><i class="bi bi-broadcast"></i> Wi‑Fi Heatmap</button>
      <button class="btn btn-outline-secondary" @onclick="FinishPolyRoom"><i class="bi bi-check2"></i> Finish</button>
      <button class="btn btn-outline-secondary" @onclick="CancelPolyRoom"><i class="bi bi-x"></i> Cancel</button>
    </div>

    <div class="d-flex align-items-center gap-2">
      <label class="text-muted small mb-0">Layer</label>
      <select class="form-select form-select-sm" style="width:auto;" @onchange="SetLayerChanged">
        @foreach (var layer in _layers)
        {
          <option value="@layer" selected="@(_currentLayer==layer)">@layer</option>
        }
      </select>
    </div>

    <div class="ms-auto text-muted small d-flex align-items-center gap-2">
      <i class="bi bi-rulers"></i>
      <span>@_measureText</span>
    </div>

    <div class="btn-group" role="group" aria-label="IO">
      <button class="btn btn-outline-success" @onclick="ExportPlan"><i class="bi bi-download"></i> Export</button>
      <div class="btn btn-outline-success">
        <i class="bi bi-upload"></i>
        <InputFile OnChange="ImportPlan" accept="application/json" />
      </div>
    </div>
  </div>

  <div class="canvas-host border rounded" style="height:600px; position:relative;">
    <canvas id="@_canvasId" class="w-100 h-100"></canvas>
  </div>

  <!-- Inspector -->
  <div class="card mt-3 shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h6 class="mb-0">Selection Inspector</h6>
      <span class="text-muted small">@(_selected?.Type ?? "None")</span>
    </div>
    <div class="card-body">
      @if (_selected != null)
      {
        <div class="row g-3">
          <div class="col-md-3">
            <label class="form-label small">Name</label>
            <input class="form-control form-control-sm" @bind="_selected.Name" />
          </div>
          <div class="col-md-2">
            <label class="form-label small">X</label>
            <input type="number" class="form-control form-control-sm" @bind="_selected.X" />
          </div>
          <div class="col-md-2">
            <label class="form-label small">Y</label>
            <input type="number" class="form-control form-control-sm" @bind="_selected.Y" />
          </div>
          @if (_selected.Type != "marker")
          {
            <div class="col-md-2">
              <label class="form-label small">W</label>
              <input type="number" class="form-control form-control-sm" @bind="_selected.W" />
            </div>
            <div class="col-md-2">
              <label class="form-label small">H</label>
              <input type="number" class="form-control form-control-sm" @bind="_selected.H" />
            </div>
          }
          <div class="col-md-3">
            <label class="form-label small">Layer</label>
            <select class="form-select form-select-sm" @bind="_selected.Layer">
              @foreach (var layer in _layers)
              {
                <option value="@layer">@layer</option>
              }
            </select>
          </div>
        </div>
        <div class="mt-3">
          <button class="btn btn-sm btn-primary" @onclick="ApplyInspector">Apply</button>
        </div>
      }
      else
      {
        <div class="text-muted">Nothing selected</div>
      }
    </div>
  </div>
</div>

@code {
  [Parameter] public string? InitialDataJson { get; set; }

  private IJSObjectReference? _module;
  private string _canvasId = $"floorplanner_{Guid.NewGuid().ToString("N")}";
  private string _units = "imperial";
  private readonly List<string> _layers = new() { "All", "Floor 1", "Floor 2", "Basement" };
  private string _currentLayer = "All";

  private SelectedModel? _selected;
  private DotNetObjectReference<FloorPlanner>? _selfRef;
  private string _measureText = "Measure: off";

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/floorplanner.js");
      _selfRef = DotNetObjectReference.Create(this);
      await _module.InvokeVoidAsync("initFloorPlanner", _canvasId, new
      {
        units = _units,
        grid = new { size = 24, color = "#e9ecef" },
        snap = true
      }, InitialDataJson, _selfRef);
    }
  }

  private async Task SetUnits(string units)
  {
    _units = units;
    if (_module != null) await _module.InvokeVoidAsync("setUnits", _canvasId, units);
  }

  private async Task AddRoomRect() => await _module!.InvokeVoidAsync("addRoomRect", _canvasId);
  private async Task AddFurniture() => await _module!.InvokeVoidAsync("addFurniture", _canvasId);
  private async Task AddCustom() => await _module!.InvokeVoidAsync("addCustom", _canvasId);
  private async Task AddDoor() => await _module!.InvokeVoidAsync("addDoor", _canvasId);
  private async Task AddWindow() => await _module!.InvokeVoidAsync("addWindow", _canvasId);
  private async Task AddMarker(string type) => await _module!.InvokeVoidAsync("addMarker", _canvasId, type);
  private async Task EnableMeasure() => await _module!.InvokeVoidAsync("enableMeasure", _canvasId);
  private async Task ToggleSnap() => await _module!.InvokeVoidAsync("toggleSnap", _canvasId);
  private async Task DeleteSelected() => await _module!.InvokeVoidAsync("deleteSelected", _canvasId);
  private async Task ToggleHeatmap() => await _module!.InvokeVoidAsync("toggleHeatmap", _canvasId);
  private async Task StartPolyRoom() => await _module!.InvokeVoidAsync("startPolyRoom", _canvasId);
  private async Task FinishPolyRoom() => await _module!.InvokeVoidAsync("finishPolyRoom", _canvasId);
  private async Task CancelPolyRoom() => await _module!.InvokeVoidAsync("cancelPolyRoom", _canvasId);
  private async Task SetLayerChanged(ChangeEventArgs e)
  {
    _currentLayer = e.Value?.ToString() ?? "All";
    await _module!.InvokeVoidAsync("setLayer", _canvasId, _currentLayer);
  }

  private async Task ExportPlan()
  {
    var json = await _module!.InvokeAsync<string>("exportPlan", _canvasId);
    await _module!.InvokeVoidAsync("downloadJson", json, "floorplan.json");
  }

  private async Task ImportPlan(InputFileChangeEventArgs e)
  {
    if (_module == null) return;
    var file = e.File;
    if (file == null) return;
    using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
    using var reader = new System.IO.StreamReader(stream);
    var json = await reader.ReadToEndAsync();
    await _module.InvokeVoidAsync("loadPlan", _canvasId, json);
  }

  // Public API for parent components (FloorPlans page)
  public async Task<string> ExportAsync()
  {
    if (_module == null) return "{}";
    return await _module.InvokeAsync<string>("exportPlan", _canvasId);
  }

  public async Task LoadAsync(string json)
  {
    if (_module == null) return;
    await _module.InvokeVoidAsync("loadPlan", _canvasId, json ?? "{}");
  }
}

@code {
  // Separate handler to satisfy Blazor limitations for input file; using JS function to read file
  public class SelectedModel
  {
    public string Type { get; set; } = string.Empty;
    public string? Name { get; set; }
    public double X { get; set; }
    public double Y { get; set; }
    public double W { get; set; }
    public double H { get; set; }
    public string Layer { get; set; } = "All";
  }

  [JSInvokable]
  public Task OnSelectionChanged(string json)
  {
    try
    {
      _selected = System.Text.Json.JsonSerializer.Deserialize<SelectedModel>(json);
      StateHasChanged();
    }
    catch { }
    return Task.CompletedTask;
  }

  [JSInvokable]
  public Task OnMeasureChanged(string text)
  {
    _measureText = string.IsNullOrWhiteSpace(text) ? "Measure: off" : text;
    StateHasChanged();
    return Task.CompletedTask;
  }

  private async Task ApplyInspector()
  {
    if (_selected == null || _module == null) return;
    await _module.InvokeVoidAsync("updateSelected", _canvasId, new
    {
      name = _selected.Name,
      x = _selected.X,
      y = _selected.Y,
      w = _selected.W,
      h = _selected.H,
      layer = _selected.Layer
    });
  }
}

<style>
  .floorplanner-wrapper .toolbar .btn { white-space: nowrap; }
  .canvas-host canvas { background-color: #fff; }
</style>
