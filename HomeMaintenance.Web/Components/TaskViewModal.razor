@using HomeMaintenance.Core.Models
@inject IJSRuntime JSRuntime

<div class="modal fade" id="taskViewModal" tabindex="-1" aria-labelledby="taskViewModalLabel">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskViewModalLabel">Task Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (Task != null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <h6 class="text-muted">Basic Information</h6>
                            <dl class="row">
                                <dt class="col-sm-4">Title</dt>
                                <dd class="col-sm-8">@Task.Title</dd>
                                
                                <dt class="col-sm-4">Description</dt>
                                <dd class="col-sm-8">@(string.IsNullOrEmpty(Task.Description) ? "No description" : Task.Description)</dd>
                                
                                <dt class="col-sm-4">Priority</dt>
                                <dd class="col-sm-8">
                                    <span class="badge bg-@(Task.Priority?.ToLower() switch { "high" => "danger", "medium" => "warning", _ => "secondary" })">
                                        @Task.Priority
                                    </span>
                                </dd>
                                
                                <dt class="col-sm-4">Frequency</dt>
                                <dd class="col-sm-8">@Task.Frequency @(Task.FrequencyInterval > 1 ? $"({Task.FrequencyInterval})" : "")</dd>
                            </dl>
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-muted">Schedule & Status</h6>
                            <dl class="row">
                                <dt class="col-sm-4">Next Due</dt>
                                <dd class="col-sm-8">
                                    @if (Task.NextDueDate.HasValue)
                                    {
                                        var daysUntilDue = (Task.NextDueDate.Value - DateTime.Now).Days;
                                        var statusClass = daysUntilDue < 0 ? "text-danger" : 
                                                       daysUntilDue <= 7 ? "text-warning" : "text-success";
                                        <span class="@statusClass">
                                            @Task.NextDueDate.Value.ToString("MMM dd, yyyy")
                                            @if (daysUntilDue < 0)
                                            {
                                                <br><small class="text-danger">@Math.Abs(daysUntilDue) days overdue</small>
                                            }
                                            else if (daysUntilDue <= 7)
                                            {
                                                <br><small class="text-warning">@daysUntilDue days left</small>
                                            }
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not scheduled</span>
                                    }
                                </dd>
                                
                                <dt class="col-sm-4">Last Completed</dt>
                                <dd class="col-sm-8">
                                    @if (Task.LastCompletedDate.HasValue)
                                    {
                                        @Task.LastCompletedDate.Value.ToString("MMM dd, yyyy")
                                    }
                                    else
                                    {
                                        <span class="text-muted">Never completed</span>
                                    }
                                </dd>
                                
                                <dt class="col-sm-4">Status</dt>
                                <dd class="col-sm-8">
                                    @{
                                        var taskStatus = Task.NextDueDate switch
                                        {
                                            var date when date < DateTime.Now => "Overdue",
                                            var date when date <= DateTime.Now.AddDays(7) => "Due Soon",
                                            _ => "Scheduled"
                                        };
                                        var taskStatusClass = taskStatus switch
                                        {
                                            "Overdue" => "danger",
                                            "Due Soon" => "warning",
                                            _ => "success"
                                        };
                                    }
                                    <span class="badge bg-@taskStatusClass">@taskStatus</span>
                                </dd>
                            </dl>
                        </div>
                    </div>
                    
                    @if (Task.ApplianceId.HasValue && Appliances != null)
                    {
                        var appliance = Appliances.FirstOrDefault(a => a.Id == Task.ApplianceId);
                        if (appliance != null)
                        {
                            <hr>
                            <h6 class="text-muted">Associated Appliance</h6>
                            <div class="row">
                                <div class="col-md-6">
                                    <dl class="row">
                                        <dt class="col-sm-4">Name</dt>
                                        <dd class="col-sm-8">@appliance.Name</dd>
                                        
                                        <dt class="col-sm-4">Category</dt>
                                        <dd class="col-sm-8">@appliance.Category</dd>
                                        
                                        <dt class="col-sm-4">Location</dt>
                                        <dd class="col-sm-8">@appliance.Location</dd>
                                    </dl>
                                </div>
                                <div class="col-md-6">
                                    <dl class="row">
                                        <dt class="col-sm-4">Brand</dt>
                                        <dd class="col-sm-8">@appliance.Brand</dd>
                                        
                                        <dt class="col-sm-4">Model</dt>
                                        <dd class="col-sm-8">@appliance.Model</dd>
                                        
                                        <dt class="col-sm-4">Purchase Date</dt>
                                        <dd class="col-sm-8">
                                            @if (appliance.PurchaseDate.HasValue)
                                            {
                                                @appliance.PurchaseDate.Value.ToString("MMM dd, yyyy")
                                            }
                                            else
                                            {
                                                <span class="text-muted">Unknown</span>
                                            }
                                        </dd>
                                    </dl>
                                </div>
                            </div>
                        }
                    }
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="bi bi-exclamation-triangle fs-1 text-muted"></i>
                        <h5 class="mt-3">Task Not Found</h5>
                        <p class="text-muted">The requested task could not be loaded.</p>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                @if (Task != null)
                {
                    <button type="button" class="btn btn-warning" @onclick="EditTask">
                        <i class="bi bi-pencil me-2"></i>Edit Task
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public MaintenanceTask? Task { get; set; }
    [Parameter] public IEnumerable<Appliance>? Appliances { get; set; }
    [Parameter] public EventCallback<int> OnEditTask { get; set; }
    
    public async Task ShowAsync()
    {
        try
        {
            Console.WriteLine("TaskViewModal.ShowAsync called");
            await JSRuntime.InvokeVoidAsync("showModal", "taskViewModal");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error showing task view modal: {ex.Message}");
        }
    }
    
    private async Task EditTask()
    {
        if (Task != null)
        {
            await OnEditTask.InvokeAsync(Task.Id);
        }
    }
} 