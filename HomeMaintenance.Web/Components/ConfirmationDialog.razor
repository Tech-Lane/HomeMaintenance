@inject IJSRuntime JSRuntime

<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">@Title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>@Message</p>
                @if (!string.IsNullOrEmpty(Details))
                {
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle"></i>
                        <strong>Warning:</strong> @Details
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmAction" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Processing...</span>
                    }
                    else
                    {
                        <i class="bi bi-trash me-2"></i>
                        <span>@ConfirmText</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "Confirm Action";
    [Parameter] public string Message { get; set; } = "Are you sure you want to proceed?";
    [Parameter] public string Details { get; set; } = "";
    [Parameter] public string ConfirmText { get; set; } = "Confirm";
    [Parameter] public EventCallback OnConfirm { get; set; }
    
    private bool isProcessing = false;

    public async Task ShowAsync()
    {
        try
        {
            Console.WriteLine("ConfirmationDialog.ShowAsync called");
            await JSRuntime.InvokeVoidAsync("showModal", "confirmationModal");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error showing confirmation dialog: {ex.Message}");
        }
    }

    public async Task HideAsync()
    {
        await JSRuntime.InvokeVoidAsync("hideModal", "confirmationModal");
    }

    private async Task ConfirmAction()
    {
        isProcessing = true;
        
        try
        {
            await OnConfirm.InvokeAsync();
            await HideAsync();
        }
        finally
        {
            isProcessing = false;
        }
    }
} 