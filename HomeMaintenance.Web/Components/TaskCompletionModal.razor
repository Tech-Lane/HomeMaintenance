@using HomeMaintenance.Core.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="modal fade" id="taskCompletionModal" tabindex="-1" aria-labelledby="taskCompletionModalLabel">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskCompletionModalLabel">Complete @TaskType</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="completionDate" class="form-label">Completion Date</label>
                    <input type="date" class="form-control" id="completionDate" @bind="completionDate" />
                </div>
                <div class="mb-3">
                    <label for="completionNotes" class="form-label">Notes (Optional)</label>
                    <textarea class="form-control" id="completionNotes" rows="3" @bind="completionNotes" placeholder="Any notes about the completion..."></textarea>
                </div>
                <div class="mb-3">
                    <label for="actualDuration" class="form-label">Actual Duration (minutes)</label>
                    <input type="number" class="form-control" id="actualDuration" @bind="actualDuration" />
                </div>
                @if (TaskType.ToLower() == "maintenance")
                {
                    <div class="mb-3">
                        <label for="actualCost" class="form-label">Actual Cost</label>
                        <input type="number" class="form-control" id="actualCost" @bind="actualCost" step="0.01" />
                    </div>
                }
                @if (TaskType.ToLower() == "chore")
                {
                    <div class="mb-3">
                        <label for="completedBy" class="form-label">Completed By</label>
                        <input type="text" class="form-control" id="completedBy" @bind="completedBy" placeholder="Who completed this chore?" />
                    </div>
                    <div class="mb-3">
                        <label for="difficultyRating" class="form-label">Difficulty Rating (1-5)</label>
                        <select class="form-select" id="difficultyRating" @bind="difficultyRating">
                            <option value="">Select rating</option>
                            <option value="1">1 - Very Easy</option>
                            <option value="2">2 - Easy</option>
                            <option value="3">3 - Moderate</option>
                            <option value="4">4 - Hard</option>
                            <option value="5">5 - Very Hard</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="completedOnTime" @bind="completedOnTime" />
                            <label class="form-check-label" for="completedOnTime">
                                Completed on time
                            </label>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" @onclick="CompleteTask" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        <span>Completing...</span>
                    }
                    else
                    {
                        <i class="bi bi-check-circle me-2"></i>
                        <span>Complete @TaskType</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string TaskType { get; set; } = ""; // "Maintenance" or "Chore"
    [Parameter] public int TaskId { get; set; }
    [Parameter] public EventCallback OnTaskCompleted { get; set; }
    
    private DateTime completionDate = DateTime.Now;
    private string completionNotes = "";
    private int? actualDuration;
    private decimal? actualCost;
    private string completedBy = "";
    private int? difficultyRating;
    private bool completedOnTime = true;
    private bool isSubmitting = false;

    public async Task ShowAsync()
    {
        try
        {
            Console.WriteLine("TaskCompletionModal.ShowAsync called");
            await JSRuntime.InvokeVoidAsync("showModal", "taskCompletionModal");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error showing task completion modal: {ex.Message}");
        }
    }

    private async Task CompleteTask()
    {
        isSubmitting = true;
        
        try
        {
            object completionData;
            
            if (TaskType.ToLower() == "maintenance")
            {
                completionData = new
                {
                    CompletionDate = completionDate,
                    Notes = completionNotes,
                    ActualDuration = actualDuration,
                    ActualCost = actualCost
                };
            }
            else
            {
                completionData = new
                {
                    CompletedAt = completionDate,
                    Notes = completionNotes,
                    ActualTimeMinutes = actualDuration,
                    CompletedBy = completedBy,
                    DifficultyRating = difficultyRating,
                    CompletedOnTime = completedOnTime
                };
            }

            var endpoint = TaskType.ToLower() == "maintenance" 
                ? $"http://localhost:5062/api/maintenancetasks/{TaskId}/complete"
                : $"http://localhost:5062/api/chores/{TaskId}/complete";

            var response = await Http.PostAsJsonAsync(endpoint, completionData);
            
            if (response.IsSuccessStatusCode)
            {
                // Close modal
                await JSRuntime.InvokeVoidAsync("hideModal", "taskCompletionModal");
                
                // Reset form
                completionDate = DateTime.Now;
                completionNotes = "";
                actualDuration = null;
                actualCost = null;
                completedBy = "";
                difficultyRating = null;
                completedOnTime = true;
                
                // Notify parent
                await OnTaskCompleted.InvokeAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error completing task: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error completing task: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }
} 