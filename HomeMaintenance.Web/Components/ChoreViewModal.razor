@using HomeMaintenance.Core.Models
@inject IJSRuntime JSRuntime

<div class="modal fade" id="choreViewModal" tabindex="-1" aria-labelledby="choreViewModalLabel">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="choreViewModalLabel">Chore Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        @if (Chore != null)
        {
          <div class="row g-4">
            <div class="col-md-6">
              <div class="card h-100 shadow-sm">
                <div class="card-body">
                  <h6 class="text-muted mb-3">Basic Information</h6>
                  <dl class="row mb-0">
                    <dt class="col-sm-4">Title</dt>
                    <dd class="col-sm-8">@Chore.Title</dd>

                    <dt class="col-sm-4">Description</dt>
                    <dd class="col-sm-8">@(string.IsNullOrWhiteSpace(Chore.Description) ? "—" : Chore.Description)</dd>

                    <dt class="col-sm-4">Category</dt>
                    <dd class="col-sm-8"><span class="badge bg-secondary">@(Chore.Category ?? "General")</span></dd>

                    <dt class="col-sm-4">Priority</dt>
                    <dd class="col-sm-8">
                      <span class="badge bg-@(Chore.Priority?.ToLower() switch { "high" => "danger", "medium" => "warning", _ => "secondary" })">@Chore.Priority</span>
                    </dd>

                    <dt class="col-sm-4">Assigned To</dt>
                    <dd class="col-sm-8">@(string.IsNullOrWhiteSpace(Chore.AssignedTo) ? "Unassigned" : Chore.AssignedTo)</dd>
                  </dl>
                </div>
              </div>
            </div>

            <div class="col-md-6">
              <div class="card h-100 shadow-sm">
                <div class="card-body">
                  <h6 class="text-muted mb-3">Schedule & Status</h6>
                  <dl class="row mb-0">
                    <dt class="col-sm-5">Due Date</dt>
                    <dd class="col-sm-7">
                      @if (Chore.DueDate.HasValue)
                      {
                        var days = (Chore.DueDate.Value.Date - DateTime.Now.Date).Days;
                        var cls = days < 0 ? "text-danger" : days == 0 ? "text-warning" : days <= 7 ? "text-info" : "text-success";
                        <span class="@cls">
                          @Chore.DueDate.Value.ToString("MMM dd, yyyy")
                          @if (days < 0)
                          {
                            <br/>
                            <small class="text-danger">@Math.Abs(days) days overdue</small>
                          }
                          else if (days == 0)
                          {
                            <br/>
                            <small class="text-warning">Due today</small>
                          }
                          else if (days <= 7)
                          {
                            <br/>
                            <small class="text-info">@days days left</small>
                          }
                        </span>
                      }
                      else
                      {
                        <span class="text-muted">Not scheduled</span>
                      }
                    </dd>

                    <dt class="col-sm-5">Last Completed</dt>
                    <dd class="col-sm-7">@(Chore.LastCompletedDate?.ToString("MMM dd, yyyy") ?? "Never")</dd>

                    <dt class="col-sm-5">Frequency</dt>
                    <dd class="col-sm-7">@(string.IsNullOrEmpty(Chore.Frequency) ? "One-time" : $"{Chore.Frequency} {(Chore.FrequencyInterval > 1 ? $"({Chore.FrequencyInterval})" : string.Empty)}")</dd>

                    <dt class="col-sm-5">Est. Time</dt>
                    <dd class="col-sm-7">@(Chore.EstimatedTimeMinutes?.ToString() ?? "—") min</dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>
        }
        else
        {
          <div class="text-center py-4">
            <i class="bi bi-exclamation-triangle fs-1 text-muted"></i>
            <h5 class="mt-3">Chore Not Found</h5>
            <p class="text-muted">The requested chore could not be loaded.</p>
          </div>
        }
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        @if (Chore != null)
        {
          <button type="button" class="btn btn-warning" @onclick="Edit">
            <i class="bi bi-pencil me-2"></i> Edit Chore
          </button>
        }
      </div>
    </div>
  </div>
</div>

@code {
  [Parameter] public Chore? Chore { get; set; }
  [Parameter] public EventCallback<int> OnEdit { get; set; }

  public async Task ShowAsync()
  {
    try
    {
      await JSRuntime.InvokeVoidAsync("showModal", "choreViewModal");
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Error showing chore view modal: {ex.Message}");
    }
  }

  private async Task Edit()
  {
    if (Chore != null)
    {
      await OnEdit.InvokeAsync(Chore.Id);
    }
  }
}